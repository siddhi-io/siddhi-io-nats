{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO NATS The siddhi-io-nats extension is an extension to Siddhi that receives and publishes events from and to NATS. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 2.0.13 . Features nats ( Sink ) NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. nats ( Source ) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Dependencies Add following jars when using nats, jnats-2.6.5.jar (Add to {SIDDHI_HOME}/jars ) protobuf-java-3.9.1.jar (Add to {SIDDHI_HOME}/bundles ) Add following jars when using nats streaming * jnats-2.6.5.jar (Add to {SIDDHI_HOME}/jars ) * java-nats-streaming-2.2.2.jar (Add to {SIDDHI_HOME}/jars ) * protobuf-java-3.9.1.jar (Add to {SIDDHI_HOME}/bundles ) Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-nats","text":"The siddhi-io-nats extension is an extension to Siddhi that receives and publishes events from and to NATS. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO NATS"},{"location":"#download","text":"Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 2.0.13 .","title":"Latest API Docs"},{"location":"#features","text":"nats ( Sink ) NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. nats ( Source ) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS.","title":"Features"},{"location":"#dependencies","text":"Add following jars when using nats, jnats-2.6.5.jar (Add to {SIDDHI_HOME}/jars ) protobuf-java-3.9.1.jar (Add to {SIDDHI_HOME}/bundles ) Add following jars when using nats streaming * jnats-2.6.5.jar (Add to {SIDDHI_HOME}/jars ) * java-nats-streaming-2.2.2.jar (Add to {SIDDHI_HOME}/jars ) * protobuf-java-3.9.1.jar (Add to {SIDDHI_HOME}/bundles )","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#sink","text":"","title":"Sink"},{"location":"api/1.0.0/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/1.0.0/#source","text":"","title":"Source"},{"location":"api/1.0.0/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#sink","text":"","title":"Sink"},{"location":"api/1.0.1/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/1.0.1/#source","text":"","title":"Source"},{"location":"api/1.0.1/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#sink","text":"","title":"Sink"},{"location":"api/1.0.2/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/1.0.2/#source","text":"","title":"Source"},{"location":"api/1.0.2/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#sink","text":"","title":"Sink"},{"location":"api/1.0.3/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/1.0.3/#source","text":"","title":"Source"},{"location":"api/1.0.3/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#sink","text":"","title":"Sink"},{"location":"api/1.0.4/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/1.0.4/#source","text":"","title":"Source"},{"location":"api/1.0.4/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#sink","text":"","title":"Sink"},{"location":"api/1.0.5/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/1.0.5/#source","text":"","title":"Source"},{"location":"api/1.0.5/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/2.0.10/","text":"API Docs - v2.0.10 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', bootstrap.servers='nats://localhost:4222', cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass NATS Streaming sequence number to the event.","title":"2.0.10"},{"location":"api/2.0.10/#api-docs-v2010","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.10"},{"location":"api/2.0.10/#sink","text":"","title":"Sink"},{"location":"api/2.0.10/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/2.0.10/#source","text":"","title":"Source"},{"location":"api/2.0.10/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', bootstrap.servers='nats://localhost:4222', cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass NATS Streaming sequence number to the event.","title":"nats (Source)"},{"location":"api/2.0.11/","text":"API Docs - v2.0.11 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , ack.wait= LONG , optional.configuration= STRING , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No ack.wait Ack timeout in seconds for nats publisher, Supported only with nats streaming broker. LONG No No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:1, io.nats.client.timeout:1000 - STRING Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish events to a nats streaming broker with basic configurations. Here the nats sink will publish events into the SP_NATS_OUTPUT_TEST subject. Nats streaming server should be runs on the localhost:4222 address. streaming.cluster.id should be provided if wer want to publish events into a nats streaming broker. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (name string, age int, country string) This example shows how to publish events into a nats broker with basic configurations. Nats server should be running on localhost:4222 and this sink will publish events to the nats-test1 subject. EXAMPLE 3 @sink(type='nats',@map(type='protobuf', class='io.siddhi.extension.io.nats.utils.protobuf.Person'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (nic long, name string) Above query shows how to use nats sink to publish protobuf messages into a nats broker. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , optional.configuration= STRING , ack.wait= LONG , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. - STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name).[supported only with nats streaming connections] None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. [supported only with nats streaming connection] None STRING Yes No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:8, io.nats.client.timeout:5000 - STRING Yes No ack.wait Add ack wait interval for nats subscriptions in seconds. Supported only with nats streaming brokers. - LONG Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject in nats streaming broker with some basic configurations.With the above configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. Since this is using a nats streaming broker it's mandatory to provide the streaming.cluster.id parameter. EXAMPLE 2 @source(type='nats', @map(type='xml'), destination='nats-test', server.urls='nats://localhost:4222') define stream inputStream1 (name string, age int, country string); This will subscribe to a Nats subject in nats broker with some basic configurations. Nats server should be running on the localhost:4222 address and this source will keep listening to messages which receives into the nats-test subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', server.urls='nats://localhost:4222', streaming.cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass Nats sequence number to the event.","title":"2.0.11"},{"location":"api/2.0.11/#api-docs-v2011","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.11"},{"location":"api/2.0.11/#sink","text":"","title":"Sink"},{"location":"api/2.0.11/#nats-sink","text":"NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , ack.wait= LONG , optional.configuration= STRING , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No ack.wait Ack timeout in seconds for nats publisher, Supported only with nats streaming broker. LONG No No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:1, io.nats.client.timeout:1000 - STRING Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish events to a nats streaming broker with basic configurations. Here the nats sink will publish events into the SP_NATS_OUTPUT_TEST subject. Nats streaming server should be runs on the localhost:4222 address. streaming.cluster.id should be provided if wer want to publish events into a nats streaming broker. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (name string, age int, country string) This example shows how to publish events into a nats broker with basic configurations. Nats server should be running on localhost:4222 and this sink will publish events to the nats-test1 subject. EXAMPLE 3 @sink(type='nats',@map(type='protobuf', class='io.siddhi.extension.io.nats.utils.protobuf.Person'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (nic long, name string) Above query shows how to use nats sink to publish protobuf messages into a nats broker.","title":"nats (Sink)"},{"location":"api/2.0.11/#source","text":"","title":"Source"},{"location":"api/2.0.11/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , optional.configuration= STRING , ack.wait= LONG , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. - STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name).[supported only with nats streaming connections] None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. [supported only with nats streaming connection] None STRING Yes No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:8, io.nats.client.timeout:5000 - STRING Yes No ack.wait Add ack wait interval for nats subscriptions in seconds. Supported only with nats streaming brokers. - LONG Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject in nats streaming broker with some basic configurations.With the above configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. Since this is using a nats streaming broker it's mandatory to provide the streaming.cluster.id parameter. EXAMPLE 2 @source(type='nats', @map(type='xml'), destination='nats-test', server.urls='nats://localhost:4222') define stream inputStream1 (name string, age int, country string); This will subscribe to a Nats subject in nats broker with some basic configurations. Nats server should be running on the localhost:4222 address and this source will keep listening to messages which receives into the nats-test subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', server.urls='nats://localhost:4222', streaming.cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass Nats sequence number to the event.","title":"nats (Source)"},{"location":"api/2.0.12/","text":"API Docs - v2.0.12 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , ack.wait= LONG , optional.configuration= STRING , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No ack.wait Ack timeout in seconds for nats publisher, Supported only with nats streaming broker. LONG No No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:1, io.nats.client.timeout:1000 - STRING Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish events to a nats streaming broker with basic configurations. Here the nats sink will publish events into the SP_NATS_OUTPUT_TEST subject. Nats streaming server should be runs on the localhost:4222 address. streaming.cluster.id should be provided if wer want to publish events into a nats streaming broker. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (name string, age int, country string) This example shows how to publish events into a nats broker with basic configurations. Nats server should be running on localhost:4222 and this sink will publish events to the nats-test1 subject. EXAMPLE 3 @sink(type='nats',@map(type='protobuf', class='io.siddhi.extension.io.nats.utils.protobuf.Person'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (nic long, name string) Above query shows how to use nats sink to publish protobuf messages into a nats broker. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , optional.configuration= STRING , ack.wait= LONG , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name).[supported only with nats streaming connections] None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. [supported only with nats streaming connection] None STRING Yes No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:8, io.nats.client.timeout:5000 - STRING Yes No ack.wait Add ack wait interval for nats subscriptions in seconds. Supported only with nats streaming brokers. - LONG Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject in nats streaming broker with some basic configurations.With the above configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. Since this is using a nats streaming broker it's mandatory to provide the streaming.cluster.id parameter. EXAMPLE 2 @source(type='nats', @map(type='xml'), destination='nats-test', server.urls='nats://localhost:4222') define stream inputStream1 (name string, age int, country string); This will subscribe to a Nats subject in nats broker with some basic configurations. Nats server should be running on the localhost:4222 address and this source will keep listening to messages which receives into the nats-test subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', server.urls='nats://localhost:4222', streaming.cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass Nats sequence number to the event.","title":"2.0.12"},{"location":"api/2.0.12/#api-docs-v2012","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.12"},{"location":"api/2.0.12/#sink","text":"","title":"Sink"},{"location":"api/2.0.12/#nats-sink","text":"NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , ack.wait= LONG , optional.configuration= STRING , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No ack.wait Ack timeout in seconds for nats publisher, Supported only with nats streaming broker. LONG No No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:1, io.nats.client.timeout:1000 - STRING Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish events to a nats streaming broker with basic configurations. Here the nats sink will publish events into the SP_NATS_OUTPUT_TEST subject. Nats streaming server should be runs on the localhost:4222 address. streaming.cluster.id should be provided if wer want to publish events into a nats streaming broker. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (name string, age int, country string) This example shows how to publish events into a nats broker with basic configurations. Nats server should be running on localhost:4222 and this sink will publish events to the nats-test1 subject. EXAMPLE 3 @sink(type='nats',@map(type='protobuf', class='io.siddhi.extension.io.nats.utils.protobuf.Person'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (nic long, name string) Above query shows how to use nats sink to publish protobuf messages into a nats broker.","title":"nats (Sink)"},{"location":"api/2.0.12/#source","text":"","title":"Source"},{"location":"api/2.0.12/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , optional.configuration= STRING , ack.wait= LONG , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name).[supported only with nats streaming connections] None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. [supported only with nats streaming connection] None STRING Yes No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:8, io.nats.client.timeout:5000 - STRING Yes No ack.wait Add ack wait interval for nats subscriptions in seconds. Supported only with nats streaming brokers. - LONG Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject in nats streaming broker with some basic configurations.With the above configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. Since this is using a nats streaming broker it's mandatory to provide the streaming.cluster.id parameter. EXAMPLE 2 @source(type='nats', @map(type='xml'), destination='nats-test', server.urls='nats://localhost:4222') define stream inputStream1 (name string, age int, country string); This will subscribe to a Nats subject in nats broker with some basic configurations. Nats server should be running on the localhost:4222 address and this source will keep listening to messages which receives into the nats-test subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', server.urls='nats://localhost:4222', streaming.cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass Nats sequence number to the event.","title":"nats (Source)"},{"location":"api/2.0.13/","text":"API Docs - v2.0.13 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , ack.wait= LONG , optional.configuration= STRING , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No ack.wait Ack timeout in seconds for nats publisher, Supported only with nats streaming broker. LONG No No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:1, io.nats.client.timeout:1000 - STRING Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish events to a nats streaming broker with basic configurations. Here the nats sink will publish events into the SP_NATS_OUTPUT_TEST subject. Nats streaming server should be runs on the localhost:4222 address. streaming.cluster.id should be provided if wer want to publish events into a nats streaming broker. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (name string, age int, country string) This example shows how to publish events into a nats broker with basic configurations. Nats server should be running on localhost:4222 and this sink will publish events to the nats-test1 subject. EXAMPLE 3 @sink(type='nats',@map(type='protobuf', class='io.siddhi.extension.io.nats.utils.protobuf.Person'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (nic long, name string) Above query shows how to use nats sink to publish protobuf messages into a nats broker. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , optional.configuration= STRING , ack.wait= LONG , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name).[supported only with nats streaming connections] None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. [supported only with nats streaming connection] None STRING Yes No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:8, io.nats.client.timeout:5000 - STRING Yes No ack.wait Add ack wait interval for nats subscriptions in seconds. Supported only with nats streaming brokers. - LONG Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject in nats streaming broker with some basic configurations.With the above configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. Since this is using a nats streaming broker it's mandatory to provide the streaming.cluster.id parameter. EXAMPLE 2 @source(type='nats', @map(type='xml'), destination='nats-test', server.urls='nats://localhost:4222') define stream inputStream1 (name string, age int, country string); This will subscribe to a Nats subject in nats broker with some basic configurations. Nats server should be running on the localhost:4222 address and this source will keep listening to messages which receives into the nats-test subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', server.urls='nats://localhost:4222', streaming.cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass Nats sequence number to the event.","title":"2.0.13"},{"location":"api/2.0.13/#api-docs-v2013","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.13"},{"location":"api/2.0.13/#sink","text":"","title":"Sink"},{"location":"api/2.0.13/#nats-sink","text":"NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , ack.wait= LONG , optional.configuration= STRING , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No ack.wait Ack timeout in seconds for nats publisher, Supported only with nats streaming broker. LONG No No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:1, io.nats.client.timeout:1000 - STRING Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish events to a nats streaming broker with basic configurations. Here the nats sink will publish events into the SP_NATS_OUTPUT_TEST subject. Nats streaming server should be runs on the localhost:4222 address. streaming.cluster.id should be provided if wer want to publish events into a nats streaming broker. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (name string, age int, country string) This example shows how to publish events into a nats broker with basic configurations. Nats server should be running on localhost:4222 and this sink will publish events to the nats-test1 subject. EXAMPLE 3 @sink(type='nats',@map(type='protobuf', class='io.siddhi.extension.io.nats.utils.protobuf.Person'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (nic long, name string) Above query shows how to use nats sink to publish protobuf messages into a nats broker.","title":"nats (Sink)"},{"location":"api/2.0.13/#source","text":"","title":"Source"},{"location":"api/2.0.13/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , optional.configuration= STRING , ack.wait= LONG , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name).[supported only with nats streaming connections] None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. [supported only with nats streaming connection] None STRING Yes No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:8, io.nats.client.timeout:5000 - STRING Yes No ack.wait Add ack wait interval for nats subscriptions in seconds. Supported only with nats streaming brokers. - LONG Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject in nats streaming broker with some basic configurations.With the above configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. Since this is using a nats streaming broker it's mandatory to provide the streaming.cluster.id parameter. EXAMPLE 2 @source(type='nats', @map(type='xml'), destination='nats-test', server.urls='nats://localhost:4222') define stream inputStream1 (name string, age int, country string); This will subscribe to a Nats subject in nats broker with some basic configurations. Nats server should be running on the localhost:4222 address and this source will keep listening to messages which receives into the nats-test subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', server.urls='nats://localhost:4222', streaming.cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass Nats sequence number to the event.","title":"nats (Source)"},{"location":"api/2.0.3/","text":"API Docs - v2.0.3 Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"2.0.3"},{"location":"api/2.0.3/#api-docs-v203","text":"","title":"API Docs - v2.0.3"},{"location":"api/2.0.3/#sink","text":"","title":"Sink"},{"location":"api/2.0.3/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/2.0.3/#source","text":"","title":"Source"},{"location":"api/2.0.3/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/2.0.4/","text":"API Docs - v2.0.4 Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"2.0.4"},{"location":"api/2.0.4/#api-docs-v204","text":"Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.4"},{"location":"api/2.0.4/#sink","text":"","title":"Sink"},{"location":"api/2.0.4/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/2.0.4/#source","text":"","title":"Source"},{"location":"api/2.0.4/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/2.0.5/","text":"API Docs - v2.0.5 Tested Siddhi Core version: 5.1.3 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"2.0.5"},{"location":"api/2.0.5/#api-docs-v205","text":"Tested Siddhi Core version: 5.1.3 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.5"},{"location":"api/2.0.5/#sink","text":"","title":"Sink"},{"location":"api/2.0.5/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/2.0.5/#source","text":"","title":"Source"},{"location":"api/2.0.5/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/2.0.6/","text":"API Docs - v2.0.6 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"2.0.6"},{"location":"api/2.0.6/#api-docs-v206","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.6"},{"location":"api/2.0.6/#sink","text":"","title":"Sink"},{"location":"api/2.0.6/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/2.0.6/#source","text":"","title":"Source"},{"location":"api/2.0.6/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/2.0.7/","text":"API Docs - v2.0.7 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"2.0.7"},{"location":"api/2.0.7/#api-docs-v207","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.7"},{"location":"api/2.0.7/#sink","text":"","title":"Sink"},{"location":"api/2.0.7/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/2.0.7/#source","text":"","title":"Source"},{"location":"api/2.0.7/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject","title":"nats (Source)"},{"location":"api/2.0.8/","text":"API Docs - v2.0.8 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', bootstrap.servers='nats://localhost:4222', cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass NATS Streaming sequence number to the event.","title":"2.0.8"},{"location":"api/2.0.8/#api-docs-v208","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.8"},{"location":"api/2.0.8/#sink","text":"","title":"Sink"},{"location":"api/2.0.8/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/2.0.8/#source","text":"","title":"Source"},{"location":"api/2.0.8/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', bootstrap.servers='nats://localhost:4222', cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass NATS Streaming sequence number to the event.","title":"nats (Source)"},{"location":"api/2.0.9/","text":"API Docs - v2.0.9 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', bootstrap.servers='nats://localhost:4222', cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass NATS Streaming sequence number to the event.","title":"2.0.9"},{"location":"api/2.0.9/#api-docs-v209","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.9"},{"location":"api/2.0.9/#sink","text":"","title":"Sink"},{"location":"api/2.0.9/#nats-sink","text":"NATS Sink allows users to subscribe to a NATS broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS broker. Should be unique for each client connecting to the server/cluster. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with all supporting configurations. With the following configuration the sink identified as 'nats-client' will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST') define stream outputStream (name string, age int, country string); This example shows how to publish to a NATS subject with mandatory configurations. With the following configuration the sink identified with an auto generated client id will publish to a subject named as 'SP_NATS_OUTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection.","title":"nats (Sink)"},{"location":"api/2.0.9/#source","text":"","title":"Source"},{"location":"api/2.0.9/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , client.id= STRING , cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers The NATS based url of the NATS server. nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS broker. None STRING Yes No cluster.id The identifier of the NATS server/cluster. test-cluster STRING Yes No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name). None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. None STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', bootstrap.servers='nats://localhost:4222',client.id='nats_client',server.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with all supporting configurations.With the following configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. EXAMPLE 2 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', ) define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject with mandatory configurations.With the following configuration the source identified with an auto generated client id will subscribes to a subject named as 'SP_NATS_INTPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This will receive all available messages in the subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', bootstrap.servers='nats://localhost:4222', cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass NATS Streaming sequence number to the event.","title":"nats (Source)"},{"location":"api/latest/","text":"API Docs - v2.0.13 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink nats (Sink) NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , ack.wait= LONG , optional.configuration= STRING , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No ack.wait Ack timeout in seconds for nats publisher, Supported only with nats streaming broker. LONG No No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:1, io.nats.client.timeout:1000 - STRING Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish events to a nats streaming broker with basic configurations. Here the nats sink will publish events into the SP_NATS_OUTPUT_TEST subject. Nats streaming server should be runs on the localhost:4222 address. streaming.cluster.id should be provided if wer want to publish events into a nats streaming broker. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (name string, age int, country string) This example shows how to publish events into a nats broker with basic configurations. Nats server should be running on localhost:4222 and this sink will publish events to the nats-test1 subject. EXAMPLE 3 @sink(type='nats',@map(type='protobuf', class='io.siddhi.extension.io.nats.utils.protobuf.Person'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (nic long, name string) Above query shows how to use nats sink to publish protobuf messages into a nats broker. Source nats (Source) NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , optional.configuration= STRING , ack.wait= LONG , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name).[supported only with nats streaming connections] None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. [supported only with nats streaming connection] None STRING Yes No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:8, io.nats.client.timeout:5000 - STRING Yes No ack.wait Add ack wait interval for nats subscriptions in seconds. Supported only with nats streaming brokers. - LONG Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject in nats streaming broker with some basic configurations.With the above configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. Since this is using a nats streaming broker it's mandatory to provide the streaming.cluster.id parameter. EXAMPLE 2 @source(type='nats', @map(type='xml'), destination='nats-test', server.urls='nats://localhost:4222') define stream inputStream1 (name string, age int, country string); This will subscribe to a Nats subject in nats broker with some basic configurations. Nats server should be running on the localhost:4222 address and this source will keep listening to messages which receives into the nats-test subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', server.urls='nats://localhost:4222', streaming.cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass Nats sequence number to the event.","title":"latest"},{"location":"api/latest/#api-docs-v2013","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.13"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#nats-sink","text":"NATS Sink allows users to subscribe to a Nats or Nats streaming broker and publish messages. Syntax @sink(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , ack.wait= LONG , optional.configuration= STRING , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS sink should publish to. STRING No Yes bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client publishing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No ack.wait Ack timeout in seconds for nats publisher, Supported only with nats streaming broker. LONG No No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:1, io.nats.client.timeout:1000 - STRING Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @sink(type='nats', @map(type='xml'), destination='SP_NATS_OUTPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster') define stream outputStream (name string, age int, country string); This example shows how to publish events to a nats streaming broker with basic configurations. Here the nats sink will publish events into the SP_NATS_OUTPUT_TEST subject. Nats streaming server should be runs on the localhost:4222 address. streaming.cluster.id should be provided if wer want to publish events into a nats streaming broker. EXAMPLE 2 @sink(type='nats', @map(type='xml'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (name string, age int, country string) This example shows how to publish events into a nats broker with basic configurations. Nats server should be running on localhost:4222 and this sink will publish events to the nats-test1 subject. EXAMPLE 3 @sink(type='nats',@map(type='protobuf', class='io.siddhi.extension.io.nats.utils.protobuf.Person'), destination='nats-test1', server.urls='nats://localhost:4222') define stream inputStream (nic long, name string) Above query shows how to use nats sink to publish protobuf messages into a nats broker.","title":"nats (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#nats-source","text":"NATS Source allows users to subscribe to a NATS broker and receive messages. It has the ability to receive all the message types supported by NATS. Syntax @source(type= nats , destination= STRING , bootstrap.servers= STRING , server.urls= STRING , client.id= STRING , cluster.id= STRING , streaming.cluster.id= STRING , queue.group.name= STRING , durable.name= STRING , subscription.sequence= STRING , optional.configuration= STRING , ack.wait= LONG , auth.type= STRING , username= STRING , password= STRING , token= STRING , truststore.file= STRING , tls.store.type= STRING , truststore.password= STRING , truststore.algorithm= STRING , client.verify= BOOL , keystore.file= STRING , keystore.algorithm= STRING , keystore.password= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic destination Subject name which NATS Source should subscribe to. STRING No No bootstrap.servers Deprecated, use server.urls instead, The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No server.urls The NATS based urls of the NATS server. Can be provided multiple urls separated by commas( , ). nats://localhost:4222 STRING Yes No client.id The identifier of the client subscribing/connecting to the NATS streaming broker. Should be unique for each client connecting to the server/cluster.(supported only for nats streaming connections). None STRING Yes No cluster.id Deprecated, use streaming.cluster.id instead. The identifier of the NATS server/cluster. Should be provided when using nats streaming broker. STRING No No streaming.cluster.id The identifier of the NATS server/cluster. Should be provided when using nats streaming broker STRING No No queue.group.name This can be used when there is a requirement to share the load of a NATS subject. Clients belongs to the same queue group share the subscription load. None STRING Yes No durable.name This can be used to subscribe to a subject from the last acknowledged message when a client or connection failure happens. The client can be uniquely identified using the tuple (client.id, durable.name).[supported only with nats streaming connections] None STRING Yes No subscription.sequence This can be used to subscribe to a subject from a given number of message sequence. All the messages from the given point of sequence number will be passed to the client. If not provided then the either the persisted value or 0 will be used. [supported only with nats streaming connection] None STRING Yes No optional.configuration This parameter contains all the other possible configurations that the nats client can be created with. io.nats.client.reconnect.max:8, io.nats.client.timeout:5000 - STRING Yes No ack.wait Add ack wait interval for nats subscriptions in seconds. Supported only with nats streaming brokers. - LONG Yes No auth.type Set the authentication type. Should be provided when using secure connection. Supported authentication types: user, token, tls - STRING Yes No username Set the username, should be provided if auth.type is set as user - STRING Yes No password Set the password, should be provided if auth.type is set as user - STRING Yes No token Set the token, should be provided if auth.type is set as token - STRING Yes No truststore.file Configure the truststore file ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.store.type TLS store type. JKS STRING Yes No truststore.password The password for the client truststore wso2carbon STRING Yes No truststore.algorithm The encryption algorithm of the truststore. SunX509 STRING Yes No client.verify Enable the client verification, should be set to true if client needs to be verify by the server. false BOOL Yes No keystore.file Configure the Keystore file, only if client verification is needed. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No keystore.algorithm The encryption algorithm of the keystore. SunX509 STRING Yes No keystore.password The password for the keystore. wso2carbon STRING Yes No Examples EXAMPLE 1 @source(type='nats', @map(type='text'), destination='SP_NATS_INPUT_TEST', server.urls='nats://localhost:4222',client.id='nats_client',streaming.cluster.id='test-cluster',queue.group.name = 'group_nats',durable.name = 'nats-durable',subscription.sequence = '100') define stream inputStream (name string, age int, country string); This example shows how to subscribe to a NATS subject in nats streaming broker with some basic configurations.With the above configuration the source identified as 'nats-client' will subscribes to a subject named as 'SP_NATS_INPUT_TEST' which resides in a nats instance with a cluster id of 'test-cluster', running in localhost and listening to the port 4222 for client connection. This subscription will receive all the messages from 100th in the subject. Since this is using a nats streaming broker it's mandatory to provide the streaming.cluster.id parameter. EXAMPLE 2 @source(type='nats', @map(type='xml'), destination='nats-test', server.urls='nats://localhost:4222') define stream inputStream1 (name string, age int, country string); This will subscribe to a Nats subject in nats broker with some basic configurations. Nats server should be running on the localhost:4222 address and this source will keep listening to messages which receives into the nats-test subject EXAMPLE 3 @source(type='nats', @map(type='json', @attributes(name='$.name', age='$.age', country='$.country', sequenceNum='trp:sequenceNumber')), destination='SIDDHI_NATS_SOURCE_TEST_DEST', client.id='nats_client', server.urls='nats://localhost:4222', streaming.cluster.id='test-cluster') define stream inputStream (name string, age int, country string, sequenceNum string); This example shows how to pass Nats sequence number to the event.","title":"nats (Source)"}]}